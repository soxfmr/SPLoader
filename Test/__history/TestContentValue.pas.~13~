unit TestContentValue;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Classes, ContentValue;

type
  // Test methods for class TContentValue

  TestTContentValue = class(TTestCase)
  strict private
    FContentValue: TContentValue;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestClear;
    procedure TestRemove;
    procedure TestGet;
    procedure TestGet1;
    procedure TestCount;
    procedure TestContaineKey;
  end;

implementation

procedure TestTContentValue.SetUp;
begin
  FContentValue := TContentValue.Create;
end;

procedure TestTContentValue.TearDown;
begin
  FContentValue.Free;
  FContentValue := nil;
end;

procedure TestTContentValue.TestAdd;
var
  value: string;
  key: string;
begin
  // TODO: Setup method call parameters
  FContentValue.Add('a', '1');
  FContentValue.Add('b', '2');
  // TODO: Validate method results
end;

procedure TestTContentValue.TestClear;
begin
  FContentValue.Clear;
  // TODO: Validate method results
end;

procedure TestTContentValue.TestRemove;
var
  key: string;
begin
  // TODO: Setup method call parameters
  FContentValue.Remove(key);
  // TODO: Validate method results
end;

procedure TestTContentValue.TestGet;
var
  ReturnValue: string;
  key: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FContentValue.Get('a');
  CheckEquals('1', ReturnValue);
  ReturnValue := FContentValue.Get('b');
  CheckEquals('2', ReturnValue);

  CheckEquals('a=1b=2');
  // TODO: Validate method results
end;

procedure TestTContentValue.TestGet1;
var
  ReturnValue: string;
  defalutValue: string;
  key: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FContentValue.Get(key, defalutValue);
  // TODO: Validate method results
end;

procedure TestTContentValue.TestCount;
var
  ReturnValue: Integer;
begin
  ReturnValue := FContentValue.Count;
  // TODO: Validate method results
end;

procedure TestTContentValue.TestContaineKey;
var
  ReturnValue: Boolean;
  key: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FContentValue.ContaineKey(key);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTContentValue.Suite);
end.

